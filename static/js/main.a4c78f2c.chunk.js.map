{"version":3,"sources":["enums.tsx","card-component.tsx","card.tsx","App.tsx","deck.tsx","registerServiceWorker.ts","index.tsx"],"names":["Color","Shape","Pattern","Quantity","colors","RED","GREEN","PURPLE","shapes","OVAL","DIAMOND","SQUIGGLE","patterns","SOLID","EMPTY","LINED","quantities","ONE","TWO","THREE","getRandomColor","n","Math","floor","random","getRandomShape","getRandomPattern","getRandomQuantity","colorMap","enums_a","card_component_CardComponent","_super","CardComponent","tslib_es6","prototype","render","_this","this","index","props","card","getQuantity","react","map","i","renderShape","path","color","getColor","getShape","fill","getPattern","svg","viewBox","d","stroke","stroke-width","className","key","Card","c","s","p","q","shape","pattern","quantity","toString","equals","other","deck","Deck","drawnCards","drawCards","cards","numberOfCards","src_card","isDrawn","push","_i","_a","length","drawn","src_App_0","App","call","state","numberSetsFound","selectedCards","setFoundMessage","id","width","height","patternUnits","patternTransform","transform","lodash","renderRow","bind","renderCard","isSelected","onClick","onCardClicked","arr","setState","filter","slice","setError","x","undefined","newCards","selected","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","react_dom","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a4c78f2c.chunk.js","sourcesContent":["export enum Color {\n  RED = \"red\",\n  GREEN = \"green\",\n  PURPLE = \"purple\"\n}\n\nexport enum Shape {\n  OVAL,\n  DIAMOND,\n  SQUIGGLE\n}\n\nexport enum Pattern {\n  SOLID,\n  EMPTY,\n  LINED\n}\n\nexport enum Quantity {\n  ONE,\n  TWO,\n  THREE\n}\n\nconst colors = [Color.RED, Color.GREEN, Color.PURPLE]\nconst shapes = [Shape.OVAL, Shape.DIAMOND, Shape.SQUIGGLE]\nconst patterns = [Pattern.SOLID, Pattern.EMPTY, Pattern.LINED]\nconst quantities = [Quantity.ONE, Quantity.TWO, Quantity.THREE]\n\nexport function getRandomColor(): Color {\n  const n = Math.floor(Math.random() * 3)\n  return colors[n]\n}\n\nexport function getRandomShape(): Shape {\n  const n = Math.floor(Math.random() * 3)\n  return shapes[n]\n}\nexport function getRandomPattern(): Pattern {\n  const n = Math.floor(Math.random() * 3)\n  return patterns[n]\n}\nexport function getRandomQuantity(): Quantity {\n  const n = Math.floor(Math.random() * 3)\n  return quantities[n]\n}\n\nexport const colorMap = {\n  [Color.RED]: '#FF4242',\n\t[Color.GREEN]: '#6FDE6E',\n\t[Color.PURPLE]: '#A691AE'\n}\n","import * as React from 'react';\nimport Card from './card'\nimport { colorMap, Pattern, Quantity, Shape } from './enums'\n\ninterface IProps {\n  card: Card\n}\n\nexport class CardComponent extends React.Component<IProps, {}> {\n  public render() {\n    let index: number[] = []\n    const card = this.props.card\n    switch(card.getQuantity()) {\n      case Quantity.ONE:\n        index = [1]\n        break\n      case Quantity.TWO:\n        index = [1, 2]\n        break\n      case Quantity.THREE:\n        index = [1, 2, 3]\n        break\n\t\t}\n    return (\n      <div>\n        {index.map(i => this.renderShape(i))}\n      </div>\n    )\n  }\n\n  private renderShape(index: number) {\n    const card = this.props.card\n    const color = colorMap[card.getColor()]\n    let path\n    switch(card.getShape()) {\n      case Shape.OVAL:\n        path = \"M36 149c-19 0-34-15-34-33V35C2 16 17 1 36 1s34 15 34 34v81c0 18-15 33-34 33z\"\n        break\n      case Shape.DIAMOND:\n        path = \"M1 74L35 2l36 73-36 74z\"\n        break\n      case Shape.SQUIGGLE:\n        path = \"M9.64,77.38C15.73,63.23,19.46,50.9,12,33.71,6.57,21.25-3.54,13.79,1.84,6.76c7.06-9.19,31.8-10.89,50.79,6.9,18.12,17,13.77,49.45,6.14,64.12-7,13.55-4.38,29.55,8.37,48.23C79.21,143.69,46,156.12,20.42,141.67-1.76,129.1-2.46,105.54,9.64,77.38Z\"\n        break\n    }\n    let fill = ''\n    switch(card.getPattern()) {\n      case Pattern.SOLID:\n        fill = color\n\t\t\t\tbreak\n      case Pattern.EMPTY:\n        fill = \"none\"\n        break\n      case Pattern.LINED:\n        fill = `url(#${card.getColor()}-stripe)`\n\t\t} \n    const svg = (\n\t\t\t<svg viewBox=\"0 0 82 164\">\n\t\t\t\t<path d={path} stroke={color} stroke-width=\"7\" fill={fill}/>\n\t\t\t</svg>\n\t\t)\n    \n    const className = 'Shape'\n    return(\n      <div className={className} key={index}>\n        {svg}\n      </div>\n    )\n  }\n}\n","import { Color, Pattern, Quantity, Shape } from './enums'\n\nexport default class Card {\n  private color: Color\n  private pattern: Pattern\n  private quantity: Quantity\n  private shape: Shape\n\n  constructor(c: Color, s: Shape, p: Pattern, q: Quantity) {\n    this.color = c\n    this.shape = s\n    this.pattern = p\n    this.quantity = q\n  }\n\n  public getColor(): Color {\n    return this.color\n  }\n\n  public getShape(): Shape {\n    return this.shape\n  }\n\n  public getPattern(): Pattern {\n    return this.pattern\n  }\n\n  public getQuantity(): Quantity {\n    return this.quantity\n  }\n\n  public toString(): string {\n    return `c: ${this.color}, s: ${this.shape}, p: ${this.pattern}, q: ${this.quantity}`  \n  }\n  \n  public equals(other: Card): boolean {\n    return this.color === other.color && this.shape === other.shape && this.pattern === other.pattern && this.quantity === other.quantity\n  }\n}\n","import './App.css';\n\nimport * as _ from 'lodash';\nimport * as React from 'react';\n\nimport Card from './card'\nimport { CardComponent } from './card-component'\nimport { checkSet, Deck } from './deck'\n\ninterface IState {\n  cards: Card[]\n  selectedCards: Card[]\n  setFoundMessage: string\n  numberSetsFound: number\n}\n\nconst deck = new Deck()\n\nclass App extends React.Component<{}, IState> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      cards: deck.drawCards(12),\n      numberSetsFound: 0,\n      selectedCards: [],\n      setFoundMessage: '',\n    }\n  }\n\n  public render() {\n    return (\n      <div className=\"App\">\n\t\t\t\t<svg>\n\t\t\t\t\t<defs>\n\t\t\t\t\t\t<pattern id=\"red-stripe\" \n\t\t\t\t\t\t\twidth=\"16\" height=\"4\"\n\t\t\t\t\t\t\tpatternUnits=\"userSpaceOnUse\"\n\t\t\t\t\t\t\tpatternTransform=\"rotate(90)\">\n\t\t\t\t\t\t\t<rect width=\"6\" height=\"4\" transform=\"translate(0,0)\" fill=\"#FF4242\"/>\n\t\t\t\t\t\t</pattern>\n\n\t\t\t\t\t\t<pattern id=\"green-stripe\" \n\t\t\t\t\t\t\twidth=\"16\" height=\"4\"\n\t\t\t\t\t\t\tpatternUnits=\"userSpaceOnUse\"\n\t\t\t\t\t\t\tpatternTransform=\"rotate(90)\">\n\t\t\t\t\t\t\t<rect width=\"6\" height=\"4\" transform=\"translate(0,0)\" fill=\"#6FDE6E\"/>\n\t\t\t\t\t\t</pattern>\n\n\t\t\t\t\t\t<pattern id=\"purple-stripe\" \n\t\t\t\t\t\t\twidth=\"16\" height=\"4\"\n\t\t\t\t\t\t\tpatternUnits=\"userSpaceOnUse\"\n\t\t\t\t\t\t\tpatternTransform=\"rotate(90)\">\n\t\t\t\t\t\t\t<rect width=\"6\" height=\"4\" transform=\"translate(0,0)\" fill=\"#A691AE\"/>\n\t\t\t\t\t\t</pattern>\n\t\t\t\t\t</defs>\n\t\t\t\t</svg>\n        <div>\n          {`You've found ${this.state.numberSetsFound} sets! Good work!`}\n        </div>\n        <div>\n          {this.state.setFoundMessage}\n        </div>\n        <div>\n          {_.chunk(this.state.cards, 3).map(this.renderRow.bind(this))}\n        </div>\n      </div>\n    );\n  }\n\n  private renderRow(cards: Card[]) {\n    return (\n      <div>\n        {cards.map(this.renderCard.bind(this))}\n      </div>\n    )\n  }\n\n  private renderCard(card: Card, index: number) {\n    const className = this.isSelected(card) ? 'Card Selected' : 'Card'\n    return (\n      <div className={className} onClick={this.onCardClicked.bind(this, card)}>\n        <div className=\"innerCard\">\n\t\t\t\t\t<CardComponent card={card} />\n        </div>\n      </div>\n    )\n  }\n\n  private onCardClicked(card: Card) {\n    if (this.isSelected(card)) {\n      this.setState({\n        selectedCards: this.state.selectedCards.filter(\n          (c: Card) => !c.equals(card)\n        ) \n      })\n    } else {\n      let selectedCards = this.state.selectedCards.slice()\n      if (selectedCards.length === 3) {\n        selectedCards = [card]\n      } else {\n        selectedCards.push(card)\n      }\n\n      if (selectedCards.length === 3) {\n        const setError = checkSet(selectedCards)\n        if (setError === undefined) {\n          const newCards = this.state.cards.filter(\n            (c: Card) => !this.isSelected(c) && !c.equals(card)\n          )\n\n          for (const c of deck.drawCards(3)) {\n            newCards.push(c)\n          }\n\n          this.setState({\n            cards: newCards,\n            numberSetsFound: this.state.numberSetsFound + 1,\n            selectedCards: [],\n            setFoundMessage: 'Found a set!',\n          })\n        } else {\n          this.setState({\n            selectedCards,\n            setFoundMessage: setError\n          })\n        }\n      } else {\n        this.setState({selectedCards})\n      }\n    }\n  }\n\n  private isSelected(card: Card): boolean {\n    for (const selected of this.state.selectedCards) {\n      if (card.equals(selected)) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\nexport default App;\n","import * as _ from 'lodash';\nimport Card from './card'\nimport { getRandomColor, getRandomPattern, getRandomQuantity, getRandomShape } from './enums'\n\nexport class Deck {\n  public drawnCards: Card[]\n\n  constructor() {\n    this.drawnCards = [] as any\n  }\n\n  public drawCards(n: number): Card[] {\n    const cards = []\n\n    let numberOfCards = 0\n    while (numberOfCards < n) {\n      const card = new Card(getRandomColor(), getRandomShape(), getRandomPattern(), getRandomQuantity())\n      if (this.isDrawn(card)) {\n        continue\n      } else {\n        cards.push(card)\n        this.drawnCards.push(card)\n        numberOfCards++\n      }\n    }\n\n    return cards\n  }\n\n  private isDrawn(card: Card): boolean {\n    for (const drawn of this.drawnCards) {\n      if (card.equals(drawn)) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\nexport function checkSet(arr: Card[]): string | undefined {\n  const uniqueColors = _.uniq(arr.map(x => x.getColor()))\n  if (uniqueColors.length === 2) {\n    return 'Colors do not match.'\n  }\n\n  const uniqueShapes = _.uniq(arr.map(x => x.getShape()))\n  if (uniqueShapes.length === 2) {\n    return 'Shapes do not match.'\n  }\n\n  const uniquePatterns = _.uniq(arr.map(x => x.getPattern()))\n  if (uniquePatterns.length === 2) {\n    return 'Patterns do not match.'\n  }\n\n  const uniqueQuantities = _.uniq(arr.map(x => x.getQuantity()))\n  if (uniqueQuantities.length === 2) {\n    return 'Quantities do not match.'\n  }\n\n  return undefined\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}